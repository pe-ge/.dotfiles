out_to_x no
own_window no
out_to_console yes
background no
max_text_width 0

# Update interval in seconds
update_interval 5.0

# This is the number of times Conky will update before quitting.
# Set to zero to run forever.
total_run_times 0

# Shortens units to a single character (kiB->k, GiB->G, etc.). Default is off.
short_units yes

# How strict should if_up be when testing an interface for being up?
# The value is one of up, link or address, to check for the interface
# being solely up, being up and having link or being up, having link
# and an assigned IP address. 
if_up_strictness address

# Add spaces to keep things from moving about?  This only affects certain objects.
# use_spacer should have an argument of left, right, or none
use_spacer left

# Force UTF8? note that UTF8 support required XFT
override_utf8_locale no

# number of cpu samples to average
# set to 1 to disable averaging
cpu_avg_samples 1

draw_graph_borders yes 
# Stuff after 'TEXT' will be formatted on screen
TEXT
[
{ "full_text" : "Vol ${exec amixer -c 0 get Master | grep Mono: | cut -d " " -f8}", "min_width":"000%", "separator": false},
{ "full_text" : "${exec amixer get Master -M | grep -oE "[[:digit:]]*%" | head -1}"},

{ "full_text" : "Layout ${exec setxkbmap -query | grep layout | cut -d ' ' -f 6 | tr '[:lower:]' '[:upper:]'}" },
{ "full_text" : "CAPS ${exec if ((`xset q | grep LED | cut -d ' ' -f 21` == 0)); then echo "OFF"; else echo "ON"; fi}" },

{ "full_text" : "/ ${fs_free /}" },
{ "full_text" : "Home ${fs_free /home}" },

{ "full_text" : "${if_up wlp3s0}${wireless_link_qual_perc wlp3s0}% ${wireless_essid wlp3s0} ${addr wlp3s0}${else}down${endif}", "color" : ${if_up wlp3s0} "\#ffffff"${else}"\#ff0000"${endif}},

{"full_text": "RAM", "separator": false, "separator_block_width":0, "color":"${if_match ${memperc} < 33}\#ffffff${else}\#ff0000${endif}"},
{"full_text": "${mem}/${memmax}"},

{"full_text": "CPU ${cpu cpu1}%","separator": false, "separator_block_width":5, "color":"${if_match ${cpu cpu1} < 33}\#ffffff${else}${if_match ${cpu cpu1} > 66}\#dca3a3${else}\#c3bf9f${endif}${endif}"},
{"full_text": "${cpu cpu2}%", "separator": false, "separator_block_width":5, "color":"${if_match ${cpu cpu2} < 33}\#ffffff${else}${if_match ${cpu cpu2} > 66}\#dca3a3${else}\#c3bf9f${endif}${endif}"},
{"full_text": "${cpu cpu3}%","separator": false, "separator_block_width":5, "color":"${if_match ${cpu cpu3} < 33}\#ffffff${else}${if_match ${cpu cpu3} > 66}\#dca3a3${else}\#c3bf9f${endif}${endif}"},
{"full_text": "${cpu cpu4}%", "min_width":"0%", "color":"${if_match ${cpu cpu4} < 33}\#ffffff${else}${if_match ${cpu cpu4} > 66}\#dca3a3${else}\#c3bf9f${endif}${endif}"},

{"full_text": "${exec sensors | grep "Core 0" | cut -d' ' -f11 | cut -d'+' -f2}", "separator": false, "separator_block_width":5},
{"full_text": "${exec sensors | grep "Core 1" | cut -d' ' -f11 | cut -d'+' -f2}"},

{"full_text": "BAT", "separator": false, "separator_block_width":5, "color": "\#ffffff"},
{"full_text": "${battery_percent BAT0}%", "separator": false, "separator_block_width":5, "color":"${if_match ${battery_percent BAT0} > 30}\#ffffff${else}\#ff0000"},
{"full_text": "${battery_percent BAT1}%", "separator": true, "separator_block_width":5, "color":"${if_match ${battery_percent BAT1} > 30}\#ffffff${else}\#ff0000"},

{"full_text": "${time %a %d %b %H:%M:%S}", "separator": false, "separator_block_width":3, "color":"\#ffffff"}

],
